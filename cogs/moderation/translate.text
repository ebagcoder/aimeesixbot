from discord.ext import commands
import deepl
from googletrans import Translator as GoogleTranslator
import config  # This imports config.py
import logging
import re

class AutoTranslateCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.deepl_translator = deepl.Translator(config.DEEPL_API_KEY)

    def clean_message_content(self, content):
        # Regex pattern to match Discord custom emojis
        discord_custom_emoji_pattern = re.compile(r'<:\w+:\d+>|:\w+:')
        # Remove custom Discord emojis
        content = discord_custom_emoji_pattern.sub('', content)
        return content.strip()

    @commands.Cog.listener()
    async def on_message(self, message):
        if self.should_ignore_message(message):
            return

        # Clean the message content to remove emojis before translating
        cleaned_content = self.clean_message_content(message.content)

        # If the cleaned content is empty after cleaning, it means the message was only emojis; don't proceed
        if not cleaned_content:
            return

        try:
            # Assuming perform_translation is a method that returns the translated text and detected language
            translation, detected_language = self.perform_translation(cleaned_content)
            if translation:
                await message.reply(f"Translated from {detected_language}: {translation}", mention_author=False)
        except Exception as e:
            logging.error(f"Error during translation: {e}")

    def should_ignore_message(self, message):
        # Conditions for ignoring a message
        return (
            message.author.bot or 
            message.is_system() or 
            self.bot.user.mentioned_in(message) or 
            message.content.startswith(self.bot.command_prefix)
        )

    def clean_message_content(self, content):
        return re.sub(r'<@!?(\d+)>;:', '', content).strip()

    def perform_translation(self, content):
        detected_language, confidence = self.detect_language(content)
        if detected_language == "en" or (confidence is not None and confidence < 0.5):
            return None, detected_language

        translation = self.translate_text(content)
        return translation, detected_language

    def detect_language(self, text):
        if self.deepl_translator:
            try:
                # Translate a small piece of text to detect the language
                result = self.deepl_translator.translate_text(' ', source_lang=None, target_lang='EN-US')
                detected_language = result.detected_source_language
                return detected_language, None  # Confidence is not provided by DeepL
            except Exception as e:
                logging.error(f"DeepL detection error: {e}")
                raise


    def translate_text(self, text, target_language='EN-US'):
        if self.deepl_translator:
            try:
                # Perform translation using DeepL
                result = self.deepl_translator.translate_text(text, target_lang=target_language)
                # Check if the 'detected_source_language' attribute is in the result
                detected_language = getattr(result, 'detected_source_language', None)
                return result.text, detected_language
            except Exception as e:
                logging.error(f"DeepL translation error: {e}")
                raise
def setup(bot):
    bot.add_cog(AutoTranslateCog(bot))
